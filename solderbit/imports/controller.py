from solderbit import *
import struct
import ssd1306
from micropython import const

epd_bitmap_BOOT_SCREEN = bytearray([
    0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0xf0, 0xf0, 0xe0, 0x40, 0x00, 0x00, 0x00, 
	0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf0, 0xf0, 
	0xf0, 0xf0, 0xc0, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 
	0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
	0xf0, 0xf0, 0xf0, 0x60, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
	0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x20, 0xf0, 0xf0, 
	0xf0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x3f, 0x38, 0x78, 0x70, 0x70, 0xf0, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x8f, 
	0xff, 0xff, 0xfe, 0x30, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 
	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 
	0xf1, 0xff, 0xff, 0x3f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x03, 0x87, 0xcf, 0xff, 0xfe, 0xfc, 0xfc, 0xfe, 0xff, 0xcf, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0e, 0x1e, 0x3e, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x3f, 0x3f, 0x1f, 0x07, 0x00, 0x00, 
	0x1f, 0x3f, 0x3f, 0x3f, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x3f, 
	0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 
	0x30, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x38, 0x38, 0x38, 0x38, 0x3c, 0x3c, 0x3e, 0x1f, 
	0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x3f, 0x3f, 0x3c, 0x38, 0x38, 0x38, 0x38, 0x38, 
	0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x1f, 0x01, 0x01, 0x01, 0x01, 0x03, 
	0x0f, 0x3f, 0x3f, 0x3c, 0x10, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x10, 0x3c, 0x3e, 
	0x3f, 0x1f, 0x0f, 0x03, 0x01, 0x00, 0x01, 0x01, 0x07, 0x0f, 0x1f, 0x3e, 0x3c, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfc, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x80, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x80, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfc, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x83, 
	0x83, 0x83, 0x83, 0x87, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x83, 0x83, 
	0x83, 0x83, 0x83, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 
	0xe0, 0xe0, 0xe0, 0xe0, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xe0, 0xe0, 
	0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 
	0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x03, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x7f, 0x7f, 0x7f, 
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 
	0x7f, 0x3f, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])

_CONTROLLER_DATA_ID = const(0x1234)
_controller_data_format = "4hi"

_J1X_OFFSET = 0
_J1Y_OFFSET = 0
_J2X_OFFSET = 0
_J2Y_OFFSET = 0
_offsets = []

power_button = pin2
off_button = pin14

class Inputs():
    JOY_X1 = (0b0000, True)
    JOY_Y1 = (0b0001, True)
    JOY_X2 = (0b0010, True)
    JOY_Y2 = (0b0011, True)
    JOY1_BTN = (0b0100, False)
    JOY2_BTN = (0b0101, False)
    R1_BTN = (0b0110, False)
    L1_BTN = (0b0111, False)
    LEFT_UP_BTN = (0b1000, False)
    LEFT_DOWN_BTN = (0b1001, False)
    LEFT_RIGHT_BTN = (0b1010, False)
    LEFT_LEFT_BTN = (0b1011, False)
    RIGHT_UP_BTN = (0b1100, False)
    RIGHT_DOWN_BTN = (0b1101, False)
    RIGHT_RIGHT_BTN = (0b1110, False)
    RIGHT_LEFT_BTN = (0b1111, False)
    controller_inputs = [JOY_X1, JOY_Y1, JOY_X2, JOY_Y2, JOY1_BTN, JOY2_BTN, R1_BTN, L1_BTN, LEFT_UP_BTN, LEFT_DOWN_BTN, LEFT_RIGHT_BTN, LEFT_LEFT_BTN, RIGHT_UP_BTN, RIGHT_DOWN_BTN, RIGHT_RIGHT_BTN, RIGHT_LEFT_BTN]

inputs = Inputs()

oled_width = 128
oled_height = 64
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c.i2c)

_buzzer_plus = pin15
_buzzer_minus = pin16


def _constrain(val, min_val, max_val) -> int:
    return min(max_val, max(min_val, val))


def init():
    global _J1X_OFFSET
    global _J1Y_OFFSET
    global _J2X_OFFSET
    global _J2Y_OFFSET
    global _offsets
    
    for num in range(10):
        _J1X_OFFSET = _J1X_OFFSET + read_input(inputs.JOY_X1, False)
        _J1Y_OFFSET = _J1Y_OFFSET + read_input(inputs.JOY_Y1, False)
        _J2X_OFFSET = _J2X_OFFSET + read_input(inputs.JOY_X2, False)
        _J2Y_OFFSET = _J2Y_OFFSET + read_input(inputs.JOY_Y2, False)

    _J1X_OFFSET = int(_J1X_OFFSET/10)
    _J1Y_OFFSET = int(_J1Y_OFFSET/10)
    _J2X_OFFSET = int(_J2X_OFFSET/10)
    _J2Y_OFFSET = int(_J2Y_OFFSET/10)

    _offsets.append(_J1X_OFFSET)
    _offsets.append(_J1Y_OFFSET)
    _offsets.append(_J2X_OFFSET)
    _offsets.append(_J2Y_OFFSET)

    oled.bitmap(epd_bitmap_BOOT_SCREEN, 0, 0,128,64)
    oled.show()
    sleep(1850)

def read_input(input, offset=True):
    pin = None
    value = input[0]&1
    pin15.write_digital(value);

    value = (input[0]>>1)&1
    pin8.write_digital(value);

    value = (input[0]>>2)&1
    pin16.write_digital(value);

    value = (input[0]>>3)&1
    sleep(1) #give some time for the mux to change channel

    if value == 0:
        pin = pin0
    else:
        pin = pin1
    
    if input[1] == False:
        value =  not pin.read_digital()
    else:
        value = pin.read_analog() if offset is False else (int(pin.read_analog()) - _offsets[input[0]&3])
        value = _constrain(value, -65534>>1, 65534>>1)

    return value
    

def read_all_inputs():
    output = []
    for inputa in inputs.controller_inputs:
        output.append(read_input(inputa))
    return output


def read_encoded():
    output = bytearray()
    data_tmp = read_all_inputs()
    data = data_tmp[0:4]
    bools = _pack_bools(data_tmp)
    data.append(bools)
    output = struct.pack(_controller_data_format, *data)
    return output


def data_decode(data):
    if data == None:
        return None
    
    data = list(struct.unpack(_controller_data_format, data))
    decoded_data = data[0:4]
    decoded_data += _unpack_bools(data[4])
    return decoded_data


def _pack_bools(data) -> int:
    output = 0
    for idx, value in enumerate(data[4:]):
        output |= value<<idx 
    return output 


def _unpack_bools(data):
    output = []
    for num in range(12):
        output.append(bool((data>>num)&1))
    return output 


def text_x_center(string, y):
    oled.text(string, 64-(len(string)*4), y)


def _print_device(device, num, max):
    oled.fill(0)

    text_x_center("Device List", 1)
    oled.line(0,10,128,10,1)
    text_x_center(device["name"], 25)
    text_x_center(device["addr"].hex(), 35)
    oled.line(0,53,128,53,1)
    text_x_center(f"{num+1}/{max}", 56)
    
    oled.show()

idx = 0
prev_press = 0

def show_devices(devices):
    global idx
    num_of_devs = len(devices)
    global prev_press

    try:
        idx %= num_of_devs

        if read_input(inputs.L1_BTN) == True and prev_press == 0:
            idx -= 1
            prev_press = 1
        elif read_input(inputs.L1_BTN) == False and prev_press == 1:
            prev_press = 0

        if read_input(inputs.R1_BTN) == True and prev_press == 0:
            idx += 1
            prev_press = 2
        elif read_input(inputs.R1_BTN) == False and prev_press == 2:
            prev_press = 0

        idx %= num_of_devs
        _print_device(devices[idx%len(devices)], idx, num_of_devs)

        if power_button.read_digital() == True:
            sleep(250)
            while power_button.read_digital() == True:
                pass
            device_id = idx
            idx = 0
            prev_press = 0
            show_connected_device(devices[device_id]["name"])
            return devices[device_id] 
    except:
        no_devices()
        return None
    
    oled.show()
    return None


def show_connected_device(name):
    oled.fill(0)
    text_x_center("Connected to:", 0)
    text_x_center(f"{name}", 10)
    text_x_center("Press red button", 30)
    text_x_center("to disconnect...", 40)
    oled.show()


def show_logo():
    oled.fill(0)
    oled.bitmap(epd_bitmap_BOOT_SCREEN, 0, 0,128,64)
    oled.show()


_time_next = 0
_cycles = 0
_out_text = 0
def no_devices():
    global _time_next
    global _cycles
    global _out_text
    oled.fill(0)
    output_text = ["Searching", "Scanning", "Detecting", "Finding", "Sniffing", "Seeking", "Pursuing", "Hunting"]
    symbols = ['....','o...', 'Oo..','0Oo.', '00Oo','000O','0000','O000','oO00', '.oO0', '..oO', '...o', '....']

    if running_time() > _time_next:
        _time_next = running_time() + 40
        _cycles = (_cycles + 1)
        if _cycles%120 == 0:
            _out_text = (_out_text+1)

    text_x_center(output_text[_out_text%len(output_text)], 20)
    text_x_center("Devices", 30)
    text_x_center(symbols[_cycles%len(symbols)], 40)
    oled.show()


def buzzer_sound(tone, freq=None):
    _buzzer_minus.write_analog(tone)

_time_next_2 = 0
_cycles_2 = 0
def power_down():
    global _time_next_2
    global _cycles_2

    if power_button.read_digital() == False:
        _cycles_2 = 0
        _time_next_2 = running_time() + 1000

    if running_time() > _time_next_2:
        _cycles_2 += 1
        _time_next_2 = running_time() + 1000
        if _cycles_2 == 2:
            oled.fill(0)
            text_x_center("Turning off", 20) 
            text_x_center("Release Button", 40)       
            oled.show()
            while power_button.read_digital() == True:
                pass
            off_button.write_digital(1)


def display_exists():
    return oled.exists




    
